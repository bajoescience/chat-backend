{"version":3,"file":"static/js/490.dd45fffe.chunk.js","mappings":"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","sources":["components/Button.js","components/Form.js","components/FormText.js","services/login.js","helper/helper.js","routes/SignIn.js"],"sourcesContent":["import { Button as MuiButton } from  '@mui/material'\r\nimport {styled} from '@mui/material'\r\n\r\n\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <>\r\n            <MuiButton\r\n            type={props.type}\r\n            fullWidth={props.fullWidth ? true: null}\r\n            variant={props.variant || 'contained'}\r\n            sx={props.sx || {mt: 2, mb: 3}}\r\n            >\r\n                {props.children}\r\n            </MuiButton>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const StyledButton = (props) => {\r\n    const MyButton = styled(MuiButton)(({theme}) => ({\r\n        borderRadius: '30px',\r\n        backgroundColor: 'white',\r\n        color: 'gray',\r\n        '&:hover': {\r\n            backgroundColor: 'white'\r\n        }\r\n    }))\r\n    return (\r\n        <>\r\n            <MyButton\r\n            variant={props.variant}\r\n            href={props.href}\r\n            target={props.target}\r\n            sx={props.sx}\r\n            disableElevation={props.disableElevation}\r\n            >\r\n                {props.children}\r\n            </MyButton>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Button","import { Box } from \"@mui/system\"\r\n\r\nconst Form = (props) => {\r\n\r\n    return (\r\n        <>\r\n         <Box component='form'\r\n          onSubmit={props.onSubmit}\r\n          sx={props.sx || {mt: 1}}\r\n          noValidate={props.noValidate ? true : null}\r\n          >\r\n            {props.children}\r\n         </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form","import { TextField, InputAdornment } from \"@mui/material\"\r\n\r\nconst FormText = (props) => {\r\n    return (\r\n        <>\r\n            <TextField\r\n              margin={props.margin || 'none'}\r\n              variant='standard'\r\n              required\r\n              fullWidth\r\n              helperText={props.helperText}\r\n              color={props.color || 'primary'}\r\n              error={props.error || null}\r\n              id={props.id}\r\n              label={props.label}\r\n              name={props.name || null}\r\n              autoComplete={props.autoComplete}\r\n              type={props.type || 'text'}\r\n              autoFocus={props.autoFocus ? true : null}\r\n              InputProps={{\r\n                startAdornment: (\r\n                    <InputAdornment position='start'>\r\n                        {props.children}\r\n                    </InputAdornment>\r\n                ),\r\n                endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                        {props.endAdornment || null}\r\n                    </InputAdornment>\r\n                )\r\n              }}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormText","import axios from \"axios\";\r\n\r\nconst baseUrl1 = \"https://cha-viuu.onrender.com/messages\";\r\nconst baseUrl = \"/api/login\";\r\n\r\nlet token = null;\r\n\r\nconst setToken = (newToken) => {\r\n  token = `bearer ${newToken}`;\r\n};\r\n\r\nconst login = async (credentials) => {\r\n  const res = await axios.post(baseUrl, credentials);\r\n  return res.data;\r\n};\r\n\r\nexport default { login };\r\n","import loginService from \"../services/login\";\r\nimport messageService from \"../services/messages\";\r\n\r\n/*\r\nconst flipArray = (array) => {\r\n    const flippedArray = []\r\n    for (let i = 0; i < array.lenth; i++) {\r\n        flippedArray = \r\n    }\r\n}\r\n*/\r\n\r\nexport const login = async (credentials, remember = false) => {\r\n  const userObj = await loginService.login(credentials);\r\n  messageService.setToken(userObj.token);\r\n\r\n  // Save user to localStorage if remember me is set\r\n  if (remember) {\r\n    // Save user object to memory\r\n    localStorage.setItem(\"loggedUser\", JSON.stringify(userObj));\r\n  }\r\n\r\n  return userObj.user;\r\n};\r\n\r\nconst ENVIRONMENT = \"test\";\r\n\r\nconst CONTACTS = [\r\n  {\r\n    contact: {\r\n      username: \"xyz\",\r\n      firstName: \"x\",\r\n      lastName: \"z\",\r\n      email: \"x\",\r\n      id: 2,\r\n    },\r\n    notif: {\r\n      sender: \"xyz\",\r\n      receiver: \"abc\",\r\n      message: \"Hi\",\r\n      count: 1,\r\n      date: \"4: 17\",\r\n      id: 1,\r\n    },\r\n  },\r\n  {\r\n    contact: {\r\n      username: \"yst\",\r\n      firstName: \"y\",\r\n      lastName: \"t\",\r\n      email: \"x\",\r\n      id: 3,\r\n    },\r\n    notif: {\r\n      sender: \"yst\",\r\n      receiver: \"abc\",\r\n      message: \"Hi\",\r\n      count: 0,\r\n      date: \"9:04\",\r\n      id: 2,\r\n    },\r\n  },\r\n];\r\n\r\nconst test = {\r\n  user: {\r\n    username: \"abc\",\r\n    firstName: \"a\",\r\n    lastName: \"c\",\r\n    email: \"a\",\r\n    passwordHash: \"abc\",\r\n    contacts: [2, 3, 4],\r\n    messages: [1, 2, 3, 4],\r\n    //The below is not needed\r\n    /* \r\n           Notification where the current user \r\n           is the receiver \r\n        */\r\n    notif: [\r\n      {\r\n        sender: [2, 3, 4],\r\n        count: Number,\r\n        message: 2,\r\n      },\r\n    ],\r\n    id: 1,\r\n  },\r\n  contacts: [\r\n    {\r\n      username: \"xyz\",\r\n      firstName: \"x\",\r\n      lastName: \"z\",\r\n      email: \"x\",\r\n      passwordHash: \"xyz\",\r\n      contacts: [1, 3, 4],\r\n      messages: [1, 2, 3, 4],\r\n      //The below is not needed\r\n      /* \r\n           Notification where the current user \r\n           is the receiver \r\n        */\r\n      notif: [\r\n        {\r\n          sender: [1, 3, 4],\r\n          count: Number,\r\n          message: 2,\r\n        },\r\n      ],\r\n      id: 2,\r\n    },\r\n    {\r\n      username: \"male\",\r\n      firstName: \"m\",\r\n      lastName: \"e\",\r\n      email: \"m\",\r\n      passwordHash: \"male\",\r\n      contacts: [1, 2, 4],\r\n      messages: [1, 2, 3, 4],\r\n      //The below is not needed\r\n      /* \r\n           Notification where the current user \r\n           is the receiver \r\n        */\r\n      notif: [\r\n        {\r\n          sender: [1, 2, 4],\r\n          count: Number,\r\n          message: 2,\r\n        },\r\n      ],\r\n      id: 3,\r\n    },\r\n    {\r\n      username: \"female\",\r\n      firstName: \"f\",\r\n      lastName: \"e\",\r\n      email: \"f\",\r\n      passwordHash: \"female\",\r\n      contacts: [1, 2, 3],\r\n      messages: [1, 2, 3, 4],\r\n      //The below is not needed\r\n      /* \r\n           Notification where the current user \r\n           is the receiver \r\n        */\r\n      notif: [\r\n        {\r\n          sender: [1, 2, 3],\r\n          count: Number,\r\n          message: 3,\r\n        },\r\n      ],\r\n      id: 4,\r\n    },\r\n  ],\r\n  message: {\r\n    string: \"Yes\",\r\n    files: [],\r\n    sender: 1,\r\n    receiver: 3,\r\n    date: new Date(),\r\n    // Keep track of all message number between the same users\r\n    sortNumber: 1,\r\n  },\r\n};\r\n\r\nexport default {\r\n  ENVIRONMENT,\r\n  CONTACTS,\r\n};\r\n","import {\r\n  Typography,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Grid,\r\n  Link,\r\n  Box,\r\n} from \"@mui/material\";\r\nimport { AccountCircle } from \"@mui/icons-material\";\r\nimport LockIcon from \"@mui/icons-material/Lock\";\r\nimport FormText from \"../../src/components/FormText\";\r\nimport Button from \"../../src/components/Button\";\r\nimport Form from \"../../src/components/Form\";\r\nimport { useNavigate, useOutletContext } from \"react-router-dom\";\r\nimport userService from \"../services/user\";\r\n\r\nimport { useState } from \"react\";\r\nimport { login } from \"../helper/helper\";\r\n\r\nconst SignIn = (props) => {\r\n  const navigate = useNavigate();\r\n  const {\r\n    userState: { setUser },\r\n  } = useOutletContext();\r\n  const [remember, setRemember] = useState(false);\r\n  const [error, setError] = useState({\r\n    bool: false,\r\n    message: \"\",\r\n  });\r\n\r\n  // Create a helper text state for each text-field to handle errors\r\n  const defaultHelperTextState = {\r\n    username: null,\r\n    password: null,\r\n  };\r\n\r\n  const [helperTextObj, sethelperTextObj] = useState(defaultHelperTextState);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const data = new FormData(e.currentTarget);\r\n    const username = data.get(\"username\");\r\n    const password = data.get(\"password\");\r\n    const userCredentials = { password, username };\r\n\r\n    // Handle all errors regarding user input\r\n    let err = false;\r\n    Object.keys(userCredentials).forEach((userDetail) => {\r\n      // Handle if the textfield was left blank by user\r\n      if (!userCredentials[userDetail] || userCredentials[userDetail] === \"\") {\r\n        const string = userDetail.toLowerCase() + \" is required\";\r\n        sethelperTextObj({ ...defaultHelperTextState, [userDetail]: string });\r\n        err = true;\r\n        return;\r\n      }\r\n    });\r\n    if (err) return;\r\n\r\n    // Log user in\r\n    try {\r\n      const loginObj = await login(userCredentials, remember);\r\n\r\n      setUser(loginObj);\r\n    } catch (error) {\r\n      // Set error message, user does not exist\r\n      setError({\r\n        bool: true,\r\n        message: error.response.data.err || \"Incorrect Username Or Password\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleLoginRedirect = () => {\r\n    navigate(\"/chat/auth/signup\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Typography component=\"h1\" variant=\"h5\">\r\n        Sign in\r\n      </Typography>\r\n      {error.bool && (\r\n        <Typography component={\"div\"} variant=\"body2\" pt={2} color={\"error\"}>\r\n          {error.message}\r\n        </Typography>\r\n      )}\r\n\r\n      <Box p={{ xs: 2, sm: 0 }}>\r\n        <Form onSubmit={handleSubmit} noValidate>\r\n          <FormText\r\n            margin=\"normal\"\r\n            id=\"username\"\r\n            label=\"Username\"\r\n            autoComplete=\"username\"\r\n            name=\"username\"\r\n            autoFocus\r\n            helperText={helperTextObj.username}\r\n            error={Boolean(helperTextObj.username)}\r\n          >\r\n            <AccountCircle />\r\n          </FormText>\r\n\r\n          <FormText\r\n            margin=\"normal\"\r\n            id=\"password\"\r\n            label=\"Password\"\r\n            name=\"password\"\r\n            autoComplete=\"current-password\"\r\n            type=\"password\"\r\n            helperText={helperTextObj.password}\r\n            error={Boolean(helperTextObj.password)}\r\n          >\r\n            <LockIcon />\r\n          </FormText>\r\n\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                value={remember}\r\n                name=\"remember\"\r\n                checked={remember}\r\n                onChange={() => {\r\n                  setRemember(!remember);\r\n                }}\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label=\"Remember me\"\r\n            sx={{ mt: 2 }}\r\n          />\r\n\r\n          <Button type=\"submit\" fullWidth variant=\"contained\">\r\n            Join\r\n          </Button>\r\n\r\n          <Grid container sx={{ mb: 8 }} justifyContent=\"flex-end\">\r\n            <Grid item xs>\r\n              <Link variant=\"body2\">Forgot Password?</Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <Link variant=\"body2\" onClick={handleLoginRedirect}>\r\n                {\"You don't have an account?, sign up\"}\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </Form>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n"],"names":["StyledButton","props","MyButton","styled","MuiButton","theme","borderRadius","backgroundColor","color","variant","href","target","sx","disableElevation","children","type","fullWidth","mt","mb","component","onSubmit","noValidate","margin","required","helperText","error","id","label","name","autoComplete","autoFocus","InputProps","startAdornment","position","endAdornment","login","credentials","axios","res","data","remember","loginService","userObj","messageService","token","localStorage","setItem","JSON","stringify","user","Date","navigate","useNavigate","setUser","useOutletContext","userState","useState","setRemember","bool","message","setError","defaultHelperTextState","username","password","helperTextObj","sethelperTextObj","handleSubmit","e","preventDefault","FormData","currentTarget","get","userCredentials","err","Object","keys","forEach","userDetail","string","toLowerCase","loginObj","response","pt","p","xs","sm","Boolean","control","value","checked","onChange","container","justifyContent","item","onClick"],"sourceRoot":""}