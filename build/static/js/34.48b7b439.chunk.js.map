{"version":3,"file":"static/js/34.48b7b439.chunk.js","mappings":"+HAwDA,IAtDmB,SAAH,GAAkB,IAAbA,EAAM,EAANA,OAoCjB,OAAIA,EAAOC,QAEH,+BACI,SAAC,IAAM,CAAEC,IAAKF,EAAOG,UAAWC,IAAKJ,EAAOK,SAKpD,+BACI,SAAC,IAAM,CACPC,GAAI,CACAC,gBAAiBP,EAAOO,iBA7Cd,SAACP,GACnB,IAEIQ,EAFEC,EAAM,UAAMT,EAAOG,UAAS,YAAIH,EAAOU,UACzCC,EAAO,EAIX,IAAKH,EAAI,EAAGA,EAAIC,EAAOG,OAAQJ,GAAK,EAClCG,EAAOF,EAAOI,WAAWL,KAAOG,GAAQ,GAAKA,GAG/C,IAAIG,EAAQ,IAEZ,IAAKN,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAEzBM,GAAS,aADMH,GAAa,EAAJH,EAAU,KACdO,SAAS,KAAMC,OAAO,EAC5C,CAGA,OAAOF,CACT,CA0BqDG,CAAcjB,IACzDkB,SAzBO,SAAClB,GAGhB,IAFA,IAAMS,EAAM,UAAMT,EAAOG,UAAS,YAAIH,EAAOU,UACzCS,EAAU,GACLX,EAAI,EAAGA,EAAIC,EAAOG,OAAQJ,GAAK,EAC1B,IAANA,EACDW,EAAUA,EAAQC,OAAOX,EAAOD,GAAGa,eACb,MAAdZ,EAAOD,IAAgC,MAAlBC,EAAOD,EAAI,KACvCW,EAAUA,EAAQC,OAAOX,EAAOD,EAAI,GAAGa,gBAG/C,OAAOF,CACT,CAcoBG,CAAStB,MAInC,C,2NC0CA,EA7FgB,SAAH,GAA8B,IAAxBuB,EAAO,EAAPA,QAASC,EAAO,EAAPA,QAc1B,OAAID,EAAQE,YAAoB,OAAPD,QAAO,IAAPA,OAAO,EAAPA,EAASE,KAE9B,SAACC,EAAA,EAAG,WACF,UAACA,EAAA,EAAG,CACFrB,GAAI,CACFsB,EAAG,IACHC,EAAG,EACHC,GAAI,EACJvB,gBAAiB,SACjBO,MAAO,YACPiB,MAAO,QACPC,aAAc,EACdC,wBAAyB,EACzBC,SAAU,CAAEC,GAAI,OAAQC,GAAI,OAC5BC,SAAU,CAAEF,GAAI,OAAQG,GAAI,OAAQF,GAAI,QACxCG,UAAW,EACXC,SAAU,YACV,WAEF,SAACC,EAAA,EAAU,CAACC,UAAW,MAAOpC,GAAI,CAAEyB,MAAO,SAAU,SAC3C,OAAPR,QAAO,IAAPA,OAAO,EAAPA,EAASd,UAGZ,SAACgC,EAAA,EAAU,CACTE,SAAU,OACVH,SAAU,WACVI,OAAQ,EACRC,KAAM,GAAG,SAED,OAAPtB,QAAO,IAAPA,OAAO,EAAPA,EAASuB,aASlB,UAACC,EAAA,EAAK,CAACC,UAAW,MAAM,WACtB,SAACrB,EAAA,EAAG,CACFrB,GAAI,CACF2C,UAAW,IACX,UAEF,SAACC,EAAA,EAAU,CAAClD,OAAQwB,OAEtB,UAACG,EAAA,EAAG,CACFrB,GAAI,CACFsB,EAAG,EACHC,EAAG,EACHC,GAAI,EACJvB,gBAAiB,YACjBO,MAAO,UACPiB,MAAO,OACPC,aAAc,EACdmB,oBAAqB,EACrBjB,SAAU,CAAEC,GAAI,OAAQC,GAAI,OAC5BC,SAAU,CAAEF,GAAI,OAAQG,GAAI,OAAQF,GAAI,QACxCG,UAAW,EACXC,SAAU,YACV,WAEF,SAACC,EAAA,EAAU,CAACC,UAAW,MAAOpC,GAAI,CAAEyB,MAAO,QAAS,UAC1C,OAAPR,QAAO,IAAPA,OAAO,EAAPA,EAASd,SAAU,UAGtB,SAACgC,EAAA,EAAU,CACTE,SAAU,OACVH,SAAU,WACVI,OAAQ,EACRQ,MAAO,GAAG,SAEF,OAAP7B,QAAO,IAAPA,OAAO,EAAPA,EAASuB,YAKpB,EC5DA,EA9BiB,SAAH,GAA+B,IAAzBO,EAAQ,EAARA,SAAU7B,EAAO,EAAPA,QAG5B,OACE,+BAEE,SAACuB,EAAA,EAAK,CACJC,UAAW,iBACX1C,GAAI,CAEFgD,UAAW,OACXC,OAAQ,UACRf,SAAU,YACV,UAED,OAAIa,GACFG,MAAK,SAACC,EAAGC,GAAC,OAAM,CAAC,IACjBC,KAAI,SAACC,GAAG,OACP,SAAC,EAAO,CAENpC,QAASA,EAETD,QAASqC,GAHJA,EAAIlC,GAIT,OAKd,E,iDC3BMmC,GAAWC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAkB,YAAO,EAALE,MAAK,MAAO,CAC7C,uBAAwB,CACpBhC,aAAc,QAElB,2BAA4B,CAC1BzB,gBAAiB,YACjB0D,WAAY,aACZnD,MAAO,QACP,aAAc,CACZoD,YAAa,aAEf,mBAAoB,CAClBA,YAAa,aAEf,yBAA0B,CACxBA,YAAa,cAGpB,IAgCD,EA9BqB,SAACC,GAAK,OACvB,SAACN,EAAQ,CACLO,QAAQ,WACRC,WAAS,EACTC,YAAY,iBACZC,MAAOJ,EAAM5C,QAAQd,OACrB+D,SAAUL,EAAMM,oBAChBC,WAAY,CACRC,gBACI,UAACC,EAAA,EAAc,CAACpC,SAAS,QAAO,WAC5B,SAAC,IAAM,CAACG,SAAS,QAAQkC,QAAS,WAAOV,EAAMW,gBAAgBX,EAAMY,YAAY,IAChFZ,EAAMY,aAAeZ,EAAMa,iBAGpCC,cACI,SAACL,EAAA,EAAc,CAACpC,SAAS,MAAK,UAC1B,UAACb,EAAA,EAAG,CAACe,UAAU,QAAO,WAClB,SAACwC,EAAA,EAAc,CAACvC,SAAS,YACzB,kBACAwC,KAAK,OACLC,QAAM,EACNZ,SAAUL,EAAMkB,8BAMlC,E,oBCqIN,EA9KqB,SAAClB,GACpB,OAAsCmB,EAAAA,EAAAA,WAAS,GAAM,eAA9CP,EAAW,KAAED,EAAc,KAClC,GAAkCQ,EAAAA,EAAAA,WAAS,GAAM,eAA1CC,EAAS,KAAEC,EAAY,KAC9B,GAA8BF,EAAAA,EAAAA,UAAS,CACrC7E,OAAQ,GACRgF,MAAO,KACP,eAHKlE,EAAO,KAAEmE,EAAU,KAM1B,GAAgCJ,EAAAA,EAAAA,UAAS,IAAG,eAArCjC,EAAQ,KAAEsC,EAAW,KAE5B,GAGIC,EAAAA,EAAAA,MAFFC,EAAY,EAAZA,aACaC,EAAI,EAAjBC,UAAaD,KAIPE,GAAcC,EAAAA,EAAAA,MAAdD,WAGRE,EAAAA,EAAAA,YAAU,WAUR,IAAMC,EAAe,yCAAG,2GACIC,EAAAA,EAAAA,SAAwB,KAAD,EAA3CC,EAAW,OACXC,EAAO,SAAC1C,GACZ,OACGA,EAAI2C,SAAWT,EAAKpE,IAAMkC,EAAInC,WAAauE,GAC3CpC,EAAInC,WAAaqE,EAAKpE,IAAMkC,EAAI2C,SAAWP,CAKhD,EACAL,EAAYU,EAAYG,OAAOF,IAAO,2CACvC,kBAZoB,mCAarBH,GACF,GAAG,CAACL,EAAME,IAEV,IAAMxE,EAAUqE,EAAaY,SAASC,MACpC,SAAClF,GAAO,OAAKA,EAAQE,KAAOsE,CAAS,IASjCW,EAAmB,SAACC,GACxBlB,GAAW,kBAAKnE,GAAO,IAAEd,OAAQc,EAAQd,OAAOW,OAAOwF,EAAEC,SAC3D,EAgBMC,EAAuB,yCAAG,WAAOF,GAAC,iFACvB,YAAXA,EAAEzB,KAAkB,iDAOH,OAHf4B,GAAa,kBACdxF,GAAO,IACVgF,OAAQT,EAAKpE,GACbD,SAAUuE,IAAS,kBAKMI,EAAAA,EAAAA,OAAsBW,GAAe,KAAD,EAAvDC,EAAU,OAChBrB,EAAYtC,EAASjC,OAAO4F,IAAa,kDAEzCC,QAAQC,IAAI,EAAD,IAAQ,QAIrBxB,EAAW,CACTjF,OAAQ,GACRgF,MAAO,KACN,0DACJ,gBAxB4B,sCAuC7B,OACE,+BACE,UAAC1C,EAAA,EAAK,CACJzC,GAAI,CACFC,gBAAiB,QACjBgD,OAAQ,CAAEpB,GAAI,OAAQC,GAAI,SAC1BJ,aAAc,EACdJ,EAAG,GACH,WAEF,SAACD,EAAA,EAAG,CACFrB,GAAI,CACFiD,OAAQ,MACR4D,MAAO,WACP,UAGF,SAAC,EAAQ,CAAC3F,QAASA,EAAS6B,SAAUA,OAExC,UAACN,EAAA,EAAK,CAACQ,OAAQ,KAAMP,UAAW,MAAOoE,QAAS,GAAG,WAEjD,SAACzF,EAAA,EAAG,CAACwF,MAAO,IAAI,UACd,SAAC,EAAY,CACX5F,QAASA,EACTyD,YAvFQ,WAAH,OACf,2BACE,SAAC,KAAW,CAACqC,aAAcV,KACtB,EAqFG5B,YAAaA,EACbN,oBAvEgB,SAACmC,GAC3BlB,GAAW,kBAAKnE,GAAO,IAAEd,OAAQmG,EAAEU,OAAO/C,QAC5C,EAsEYO,eAAgBA,EAChBO,qBAjFiB,SAACuB,GAAO,IAAD,EAClClB,GAAW,kBACNnE,GAAO,IACVd,OAAQ,QACRgF,OAAO,EAAAlE,EAAQkE,OAAMrE,OAAM,gBAAIwF,EAAEU,OAAO7B,UAE5C,OA8EQ,SAAC9D,EAAA,EAAG,CACFrB,GAAI,CACF0B,aAAc,GACduB,OAAQ,GACR4D,MAAO,GACP5G,gBAAiB,YACjBiC,SAAU,WACVI,OAAQ,EACR2E,GAAI,OACJC,GAAI,OACJ,UAEF,SAACC,EAAA,EACC,CACA5C,QAASiC,EACTY,YAAanC,EAAY,KA3DZ,SAACqB,GACxBpB,GAAa,GAEbmC,YAAW,WACTnC,GAAa,EACf,GAAG,IACL,EAqD6D,SAEhDD,GACC,SAACqC,EAAA,EAAW,CAACjF,SAAS,WAEtB,SAACkF,EAAA,EAAQ,CAAClF,SAAS,qBAQnC,C","sources":["components/UserAvatar.js","components/Message.js","components/Messages.js","components/MessageInput.js","routes/MessageBlock.js"],"sourcesContent":["import { Avatar } from \"@mui/material\"\r\n\r\nconst UserAvatar = ({person}) => {\r\n\r\n    const stringToColor = (person) => {\r\n        const string = `${person.firstName} ${person.lastName}`\r\n        let hash = 0;\r\n        let i;\r\n      \r\n        /* eslint-disable no-bitwise */\r\n        for (i = 0; i < string.length; i += 1) {\r\n          hash = string.charCodeAt(i) + ((hash << 5) - hash);\r\n        }\r\n      \r\n        let color = '#';\r\n      \r\n        for (i = 0; i < 3; i += 1) {\r\n          const value = (hash >> (i * 8)) & 0xff;\r\n          color += `00${value.toString(16)}`.slice(-2);\r\n        }\r\n        /* eslint-enable no-bitwise */\r\n      \r\n        return color;\r\n      }\r\n\r\n      const initials = (person) => {\r\n        const string = `${person.firstName} ${person.lastName}`\r\n        let initial = ''\r\n        for (let i = 0; i < string.length; i += 1) {\r\n            if (i === 0) {\r\n               initial = initial.concat(string[i].toUpperCase())\r\n            } else if (string[i] === ' ' && string[i + 1] !== ' ' ) {\r\n                initial = initial.concat(string[i + 1].toUpperCase())\r\n            }\r\n        }\r\n        return initial\r\n      }\r\n\r\n    if (person.avatar) {\r\n        return (\r\n            <>\r\n                <Avatar  alt={person.firstName} src={person.img} />\r\n            </>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <Avatar \r\n            sx={{\r\n                backgroundColor: person.backgroundColor || stringToColor(person)}} \r\n                children={initials(person)} \r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserAvatar","import { Box, Stack, Typography } from \"@mui/material\";\r\nimport UserAvatar from \"./UserAvatar\";\r\n\r\nconst Message = ({ message, contact }) => {\r\n  // TODO: Open the files\r\n  const getFiles = () => {\r\n    const files = message.files;\r\n\r\n    if (files.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Open file\r\n    return files.map((file) => <Box>{file}</Box>);\r\n  };\r\n\r\n  // Messages sent by user\r\n  if (message.receiver === contact?.id) {\r\n    return (\r\n      <Box>\r\n        <Box\r\n          sx={{\r\n            p: 2.5,\r\n            m: 2,\r\n            mb: 4,\r\n            backgroundColor: \"purple\",\r\n            color: \"aliceblue\",\r\n            float: \"right\",\r\n            borderRadius: 4,\r\n            borderBottomRightRadius: 0,\r\n            minWidth: { xs: \"10vw\", md: \"6vw\" },\r\n            maxWidth: { xs: \"45vw\", sm: \"35vw\", md: \"20vw\" },\r\n            boxShadow: 4,\r\n            position: \"relative\",\r\n          }}\r\n        >\r\n          <Typography component={\"div\"} sx={{ float: \"right\" }}>\r\n            {message?.string}\r\n          </Typography>\r\n          {/**Display files here */}\r\n          <Typography\r\n            fontSize={\"10px\"}\r\n            position={\"absolute\"}\r\n            bottom={2}\r\n            left={10}\r\n          >\r\n            {message?.date}\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // Messages received by user\r\n  return (\r\n    <Stack direction={\"row\"}>\r\n      <Box\r\n        sx={{\r\n          marginTop: 0.5,\r\n        }}\r\n      >\r\n        <UserAvatar person={contact} />\r\n      </Box>\r\n      <Box\r\n        sx={{\r\n          p: 2,\r\n          m: 2,\r\n          mb: 4,\r\n          backgroundColor: \"aliceblue\",\r\n          color: \"#555555\",\r\n          float: \"left\",\r\n          borderRadius: 4,\r\n          borderTopLeftRadius: 0,\r\n          minWidth: { xs: \"10vw\", md: \"7vw\" },\r\n          maxWidth: { xs: \"45vw\", sm: \"35vw\", md: \"20vw\" },\r\n          boxShadow: 8,\r\n          position: \"relative\",\r\n        }}\r\n      >\r\n        <Typography component={\"div\"} sx={{ float: \"left\" }}>\r\n          {message?.string || \"okay\"}\r\n        </Typography>\r\n        {/**Display files here */}\r\n        <Typography\r\n          fontSize={\"10px\"}\r\n          position={\"absolute\"}\r\n          bottom={1}\r\n          right={10}\r\n        >\r\n          {message?.date}\r\n        </Typography>\r\n      </Box>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import { Stack } from \"@mui/material\";\r\nimport Message from \"./Message\";\r\n\r\n// Serves as a container to differentiate the user from friends message\r\nconst Messages = ({ messages, contact }) => {\r\n  // TODO: Sort messages by date in ascending order\r\n\r\n  return (\r\n    <>\r\n      {/*TODO: complete the process for appending the messages to the chat board */}\r\n      <Stack\r\n        direction={\"column-reverse\"}\r\n        sx={{\r\n          // scrolling goes here\r\n          overflowY: \"auto\",\r\n          height: \"inherit\",\r\n          position: \"relative\",\r\n        }}\r\n      >\r\n        {[...messages]\r\n          .sort((a, b) => -1)\r\n          .map((msg) => (\r\n            <Message\r\n              key={msg.id}\r\n              contact={contact}\r\n              // Message already has sender and receiver properties\r\n              message={msg}\r\n            />\r\n          ))}\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import { Box, TextField, styled, InputAdornment, } from \"@mui/material\"\r\nimport { SentimentSatisfiedAlt as Smiley} from '@mui/icons-material/';\r\nimport AttachFileIcon from '@mui/icons-material/AttachFile';\r\n\r\n\r\nconst MySearch = styled(TextField)(({theme}) => ({\r\n    '& .MuiInputBase-root': {\r\n        borderRadius: '70px',\r\n      },\r\n    '& .MuiOutlinedInput-root': {\r\n      backgroundColor: 'aliceblue',\r\n      fontFamily: 'sans-serif',\r\n      color: 'black',\r\n      '& fieldset': {\r\n        borderColor: 'aliceblue',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: 'aliceblue',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: 'aliceblue'\r\n      },\r\n    }\r\n}))\r\n\r\nconst MessageInput = (props) => (\r\n    <MySearch\r\n        variant=\"outlined\" \r\n        fullWidth\r\n        placeholder=\"Type a message\"\r\n        value={props.message.string}\r\n        onChange={props.handleMessageChange}\r\n        InputProps={{\r\n            startAdornment: (\r\n                <InputAdornment position='start'>\r\n                    <Smiley fontSize=\"large\" onClick={() => {props.setToggleEmoji(!props.toggleEmoji)}} />\r\n                    {props.toggleEmoji && props.renderEmoji()}\r\n                </InputAdornment>\r\n            ),\r\n            endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                    <Box component='label' >\r\n                        <AttachFileIcon fontSize='medium' />\r\n                        <input\r\n                        type='file' \r\n                        hidden\r\n                        onChange={props.handleFileSubmission}\r\n                        />\r\n                    </Box>\r\n                </InputAdornment>\r\n            )\r\n        }}\r\n    />\r\n)\r\n\r\nexport default MessageInput","import { Box, IconButton, Stack } from \"@mui/material\";\r\nimport EmojiPicker from \"emoji-picker-react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { SendTwoTone } from \"@mui/icons-material/\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport Messages from \"../components/Messages\";\r\nimport MessageInput from \"../components/MessageInput\";\r\nimport { useOutletContext, useParams } from \"react-router-dom\";\r\nimport messageService from \"../services/messages\";\r\n\r\n// TODO: At the top bar, add a back button to chat\r\nconst MessageBlock = (props) => {\r\n  const [toggleEmoji, setToggleEmoji] = useState(false);\r\n  const [sendHover, setSendHover] = useState(false);\r\n  const [message, setMessage] = useState({\r\n    string: \"\",\r\n    files: [],\r\n  });\r\n\r\n  // Store the messages between the user and contact in state\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const {\r\n    contactState,\r\n    userState: { user },\r\n  } = useOutletContext();\r\n\r\n  // Get contact id from URL string\r\n  const { contactId } = useParams();\r\n\r\n  // First, get all the messages between user and contact\r\n  useEffect(() => {\r\n    //  const getChatMessages = async () => {\r\n    //     let allMessages = [];\r\n    //     const messages1 = await messageService.getMessages(user.id, contactId);\r\n    //     const messages2 = await messageService.getMessages(contactId, user.id);\r\n    //     allMessages = allMessages.concat(messages1).concat(messages2);\r\n\r\n    //     setMessages(allMessages);\r\n    //   };\r\n    //   getChatMessages();\r\n    const getChatMessages = async () => {\r\n      const allMessages = await messageService.getAll();\r\n      const bool = (msg) => {\r\n        if (\r\n          (msg.sender === user.id && msg.receiver === contactId) ||\r\n          (msg.receiver === user.id && msg.sender === contactId)\r\n        ) {\r\n          return true;\r\n        }\r\n        return false;\r\n      };\r\n      setMessages(allMessages.filter(bool));\r\n    };\r\n    getChatMessages();\r\n  }, [user, contactId]);\r\n\r\n  const contact = contactState.contacts.find(\r\n    (contact) => contact.id === contactId\r\n  );\r\n\r\n  const renderEmoji = () => (\r\n    <span>\r\n      <EmojiPicker onEmojiClick={handleEmojiClick} />\r\n    </span>\r\n  );\r\n\r\n  const handleEmojiClick = (e) => {\r\n    setMessage({ ...message, string: message.string.concat(e.emoji) });\r\n  };\r\n\r\n  const handleFileSubmission = (e) => {\r\n    setMessage({\r\n      ...message,\r\n      string: \"files\",\r\n      files: message.files.concat(...e.target.files),\r\n    });\r\n  };\r\n\r\n  const handleMessageChange = (e) => {\r\n    setMessage({ ...message, string: e.target.value });\r\n  };\r\n\r\n  //Create a message\r\n  // update notif count of contact , so that contact can see the notif\r\n  const handleMessageSubmission = async (e) => {\r\n    if (e.type === \"keydown\") {\r\n      return;\r\n    }\r\n    // Do something with the message here\r\n    const messageObject = {\r\n      ...message,\r\n      sender: user.id,\r\n      receiver: contactId,\r\n    };\r\n\r\n    try {\r\n      // Create the message\r\n      const newMessage = await messageService.create(messageObject);\r\n      setMessages(messages.concat(newMessage));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    // Clear input area\r\n    setMessage({\r\n      string: \"\",\r\n      files: [],\r\n    });\r\n  };\r\n\r\n  const handleIconChange = (e) => {\r\n    setSendHover(true);\r\n\r\n    setTimeout(() => {\r\n      setSendHover(false);\r\n    }, 2000);\r\n  };\r\n\r\n  /* Assign the roles of the messages here\r\n    if the message's sender is the current account user, \r\n    we put the message role as sender else, we put the message \r\n    role as receiver */\r\n  // We can move this to the server side to implement\r\n  return (\r\n    <>\r\n      <Stack\r\n        sx={{\r\n          backgroundColor: \"white\",\r\n          height: { xs: \"75vh\", md: \"100vh\" },\r\n          borderRadius: 2,\r\n          p: 2,\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            height: \"92%\",\r\n            width: \"inherit\",\r\n          }}\r\n        >\r\n          {/**The roles are defined as sender and receiver */}\r\n          <Messages contact={contact} messages={messages} />\r\n        </Box>\r\n        <Stack height={\"8%\"} direction={\"row\"} spacing={10}>\r\n          {/**This is the input container */}\r\n          <Box width={600}>\r\n            <MessageInput\r\n              message={message}\r\n              renderEmoji={renderEmoji}\r\n              toggleEmoji={toggleEmoji}\r\n              handleMessageChange={handleMessageChange}\r\n              setToggleEmoji={setToggleEmoji}\r\n              handleFileSubmission={handleFileSubmission}\r\n            />\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              borderRadius: 10,\r\n              height: 70,\r\n              width: 70,\r\n              backgroundColor: \"lightblue\",\r\n              position: \"relative\",\r\n              bottom: 8,\r\n              pl: \"10px\",\r\n              pt: \"8px\",\r\n            }}\r\n          >\r\n            <IconButton\r\n              // If mouseover event is alraedy registered, block it for some time\r\n              onClick={handleMessageSubmission}\r\n              onMouseOver={sendHover ? null : handleIconChange}\r\n            >\r\n              {sendHover ? (\r\n                <SendTwoTone fontSize=\"large\" />\r\n              ) : (\r\n                <SendIcon fontSize=\"large\" />\r\n              )}\r\n            </IconButton>\r\n          </Box>\r\n        </Stack>\r\n      </Stack>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MessageBlock;\r\n"],"names":["person","avatar","alt","firstName","src","img","sx","backgroundColor","i","string","lastName","hash","length","charCodeAt","color","toString","slice","stringToColor","children","initial","concat","toUpperCase","initials","message","contact","receiver","id","Box","p","m","mb","float","borderRadius","borderBottomRightRadius","minWidth","xs","md","maxWidth","sm","boxShadow","position","Typography","component","fontSize","bottom","left","date","Stack","direction","marginTop","UserAvatar","borderTopLeftRadius","right","messages","overflowY","height","sort","a","b","map","msg","MySearch","styled","TextField","theme","fontFamily","borderColor","props","variant","fullWidth","placeholder","value","onChange","handleMessageChange","InputProps","startAdornment","InputAdornment","onClick","setToggleEmoji","toggleEmoji","renderEmoji","endAdornment","AttachFile","type","hidden","handleFileSubmission","useState","sendHover","setSendHover","files","setMessage","setMessages","useOutletContext","contactState","user","userState","contactId","useParams","useEffect","getChatMessages","messageService","allMessages","bool","sender","filter","contacts","find","handleEmojiClick","e","emoji","handleMessageSubmission","messageObject","newMessage","console","log","width","spacing","onEmojiClick","target","pl","pt","IconButton","onMouseOver","setTimeout","SendTwoTone","Send"],"sourceRoot":""}